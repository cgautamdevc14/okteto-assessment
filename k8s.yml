apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - image: okteto.dev/go-hello-world:1.0.0
        name: hello-world

---

apiVersion: v1
kind: Service
metadata:
  name: hello-world
  annotations:
    dev.okteto.com/auto-ingress: "true"
spec:
  type: ClusterIP
  ports:
  - name: "hello-world"
    port: 8080
  selector:
    app: hello-world

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hello-world
  annotations:
    dev.okteto.com/generate-host: hello-world
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: hello-world
            port:
              number: 8080
        path: /
        pathType: ImplementationSpecific

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: role-manager
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: role-manager-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: okteto
roleRef:
  kind: ClusterRole
  name: role-manager
  apiGroup: rbac.authorization.k8s.io

---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-listing-role-binding
  namespace: cgautamdevc14
subjects:
- kind: ServiceAccount
  name: default
  namespace: cgautamdevc14
roleRef:
  kind: Role
  name: pod-listing-role
  apiGroup: rbac.authorization.k8s.io